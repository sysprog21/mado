#!/usr/bin/env python3
"""
Generate composite function declarations for twin_private.h

This script generates the ~128 function declarations for compositing operations
that are currently manually listed in twin_private.h:280-405.

The functions are actually generated by macros in src/primitive.c, but we need
their declarations in the header.
"""

# Format types for src, msk, and dst
FORMATS = ["argb32", "rgb16", "a8", "c"]
# Operators
OPS = ["over", "source"]


def generate_3operand_decls():
    """
    Generate declarations for 3-operand functions:
    _twin_{src}_in_{msk}_{op}_{dst}

    These are generated by MAKE_TWIN_in_op_dsts_srcs_msks macro
    """
    decls = []

    # Format: _twin_{src}_in_{msk}_{op}_{dst}
    # Generated from primitive.c:179
    # MAKE_TWIN_in_op_dsts_srcs_msks(over)
    # MAKE_TWIN_in_op_dsts_srcs_msks(source)

    for op in OPS:
        for dst in ["argb32", "rgb16", "a8"]:  # dst doesn't include 'c'
            for src in FORMATS:
                for msk in FORMATS:
                    func_name = f"_twin_{src}_in_{msk}_{op}_{dst}"
                    decls.append(f"twin_in_op_func {func_name};")

    return decls


def generate_2operand_decls():
    """
    Generate declarations for 2-operand functions:
    _twin_{src}_{op}_{dst}

    These are generated by MAKE_TWIN_op_dsts_srcs macro
    """
    decls = []

    # Format: _twin_{src}_{op}_{dst}
    # Generated from primitive.c:220-221
    # MAKE_TWIN_op_dsts_srcs(over);
    # MAKE_TWIN_op_dsts_srcs(source);

    for op in OPS:
        for dst in ["argb32", "rgb16", "a8"]:  # dst doesn't include 'c'
            for src in FORMATS:
                func_name = f"_twin_{src}_{op}_{dst}"
                decls.append(f"twin_op_func {func_name};")

    return decls


def generate_screen_ops_decls():
    """
    Generate declarations for essential screen compositing functions
    These are implemented in screen-ops.c and always available
    """
    return [
        "twin_op_func _twin_rgb16_source_argb32;",
        "twin_op_func _twin_argb32_over_argb32;",
        "twin_op_func _twin_argb32_source_argb32;",
    ]


def generate_vectorized_decls():
    """
    Generate declarations for vectorized functions
    These are hand-written optimizations
    """
    return [
        "twin_op_func _twin_vec_argb32_over_argb32;",
        "twin_op_func _twin_vec_argb32_source_argb32;",
    ]


def generate_header():
    """Generate header comment"""
    return """/*
 * Compositing operation function declarations
 *
 * These functions are generated by macros in:
 * - src/draw-builtin.c (when CONFIG_RENDERER_BUILTIN=y)
 * - src/screen-ops.c (always available)
 *
 * This file is auto-generated by the build system - DO NOT EDIT
 */

#ifndef _TWIN_COMPOSITE_DECLS_H_
#define _TWIN_COMPOSITE_DECLS_H_

/* Forward declarations for function types */
typedef void twin_in_op_func(twin_pointer_t dst,
                             twin_source_u src,
                             twin_source_u msk,
                             int width);

typedef void twin_op_func(twin_pointer_t dst, twin_source_u src, int width);
"""


def generate_footer():
    """Generate footer"""
    return """
#endif /* _TWIN_COMPOSITE_DECLS_H_ */
"""


def main():
    print(generate_header())

    print("\n/* Essential screen compositing (always available from screen-ops.c) */")
    for decl in generate_screen_ops_decls():
        print(decl)

    print("\n/* 3-operand compositing: _twin_{src}_in_{msk}_{op}_{dst} */")
    print("/* Total: 2 ops * 3 dsts * 4 srcs * 4 msks = 96 functions */")
    print("/* Only available when CONFIG_RENDERER_BUILTIN=y */")
    for decl in generate_3operand_decls():
        print(decl)

    print("\n/* 2-operand compositing: _twin_{src}_{op}_{dst} */")
    print("/* Total: 2 ops * 3 dsts * 4 srcs = 24 functions */")
    print("/* Only available when CONFIG_RENDERER_BUILTIN=y */")
    for decl in generate_2operand_decls():
        print(decl)

    print("\n/* Vectorized implementations (hand-optimized) */")
    for decl in generate_vectorized_decls():
        print(decl)

    print(generate_footer())


if __name__ == "__main__":
    main()
